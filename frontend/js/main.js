const API_URL = 'http://localhost:5000/api';
const timeSlots = [
    '8:30', '9:00', '9:30', '10:00', '10:30', '11:00', '11:30', '12:00',
    '14:00', '14:30', '15:00', '15:30', '16:00', '16:30'
];

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const modal = document.getElementById('appointmentModal');
const closeBtn = document.getElementsByClassName('close')[0];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showAppointmentForm() {
    modal.style.display = 'flex';
    populateTimeSlots();
    updateAvailableTimeSlots(); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
}

closeBtn.onclick = function() {
    modal.style.display = 'none';
}

window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = 'none';
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
function populateTimeSlots() {
    const timeSelect = document.getElementById('appointmentTime');
    const currentLang = localStorage.getItem('preferred-language') || 'ru';
    
    timeSelect.innerHTML = '';
    timeSlots.forEach(time => {
        const option = document.createElement('option');
        option.value = time;
        option.textContent = `üü¢ ${time}`;
        option.className = 'time-available';
        timeSelect.appendChild(option);
    });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
const dateInput = document.getElementById('appointmentDate');
const today = new Date();
dateInput.min = today.toISOString().split('T')[0];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
document.getElementById('appointmentForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const currentLang = localStorage.getItem('preferred-language') || 'ru';

    const formData = {
        patientName: document.getElementById('patientName').value,
        phoneNumber: document.getElementById('phoneNumber').value,
        date: document.getElementById('appointmentDate').value,
        time: document.getElementById('appointmentTime').value
    };

    try {
        const response = await fetch(`${API_URL}/appointments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
            alert(translations[currentLang]['appointment-success']);
            modal.style.display = 'none';
            document.getElementById('appointmentForm').reset();
        } else {
            alert(data.message || translations[currentLang]['appointment-error']);
        }
    } catch (error) {
        alert(translations[currentLang]['appointment-error']);
    }
});

// –î–æ–±–∞–≤–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function updateAvailableTimeSlots() {
    const date = document.getElementById('appointmentDate').value;
    const timeSelect = document.getElementById('appointmentTime');
    const currentLang = localStorage.getItem('preferred-language') || 'ru';

    if (!date) return;

    fetch(`${API_URL}/appointments/${date}`)
        .then(response => response.json())
        .then(data => {
            timeSelect.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

            timeSlots.forEach(time => {
                const option = document.createElement('option');
                const isOccupied = data.appointments.some(app => app.time === time);
                const isBlocked = data.blockedTimes.some(block => block.time === time);

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                if (isOccupied || isBlocked) {
                    option.value = time;
                    option.textContent = `üî¥ ${time} (${translations[currentLang]['time-occupied']})`;
                    option.disabled = true;
                    option.className = 'time-occupied';
                } else {
                    option.value = time;
                    option.textContent = `üü¢ ${time}`;
                    option.className = 'time-available';
                }

                timeSelect.appendChild(option);
            });
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
document.getElementById('appointmentDate').addEventListener('change', updateAvailableTimeSlots);

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function changeLanguage(lang) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(`${lang}-btn`).classList.add('active');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    document.querySelectorAll('[data-lang]').forEach(element => {
        const key = element.getAttribute('data-lang');
        if (translations[lang] && translations[lang][key]) {
            if (element.tagName.toLowerCase() === 'input' && element.type === 'submit') {
                element.value = translations[lang][key];
            } else {
                element.textContent = translations[lang][key];
            }
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    localStorage.setItem('preferred-language', lang);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const savedLanguage = localStorage.getItem('preferred-language') || 'ru';
    changeLanguage(savedLanguage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
document.querySelectorAll('.accordion-button').forEach(button => {
    button.addEventListener('click', () => {
        const content = button.nextElementSibling;
        const isActive = button.classList.contains('active');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã
        document.querySelectorAll('.accordion-button').forEach(btn => {
            btn.classList.remove('active');
            btn.nextElementSibling.classList.remove('active');
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–æ—Ä–¥–µ–æ–Ω, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç
        if (!isActive) {
            button.classList.add('active');
            content.classList.add('active');
        }
    });
}); 